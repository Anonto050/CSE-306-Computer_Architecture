
DataMemory.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000132  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  00800060  00800060  000001a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006d8  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005c7  00000000  00000000  00000914  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002cb  00000000  00000000  00000edb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  000011a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a2  00000000  00000000  000011dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000184  00000000  00000000  0000157e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001702  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 38       	cpi	r26, 0x80	; 128
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  74:	0c 94 97 00 	jmp	0x12e	; 0x12e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Reset>:

unsigned int DATA_MEM[16];

//reset values to zero
void Reset() {
	for (int i=0; i<16; i++)
  7c:	80 e0       	ldi	r24, 0x00	; 0
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	08 c0       	rjmp	.+16     	; 0x92 <Reset+0x16>
	     DATA_MEM[i] = 0;
  82:	fc 01       	movw	r30, r24
  84:	ee 0f       	add	r30, r30
  86:	ff 1f       	adc	r31, r31
  88:	e0 5a       	subi	r30, 0xA0	; 160
  8a:	ff 4f       	sbci	r31, 0xFF	; 255
  8c:	11 82       	std	Z+1, r1	; 0x01
  8e:	10 82       	st	Z, r1

unsigned int DATA_MEM[16];

//reset values to zero
void Reset() {
	for (int i=0; i<16; i++)
  90:	01 96       	adiw	r24, 0x01	; 1
  92:	80 31       	cpi	r24, 0x10	; 16
  94:	91 05       	cpc	r25, r1
  96:	ac f3       	brlt	.-22     	; 0x82 <Reset+0x6>
	     DATA_MEM[i] = 0;
}
  98:	08 95       	ret

0000009a <main>:

int main(void)
{
	DDRB = 0xF0;	// B[0] - Memory Write | B[1] - Memory Read | B[2] - Clock | B[3] - Reset
  9a:	80 ef       	ldi	r24, 0xF0	; 240
  9c:	87 bb       	out	0x17, r24	; 23
	DDRD = 0x00;	// Address D[3:0] | Write Data D[7:4]
  9e:	11 ba       	out	0x11, r1	; 17
	DDRA = 0xFF;	// A[3:0] - Data Read
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	8a bb       	out	0x1a, r24	; 26
	
	Reset();
  a4:	0e 94 3e 00 	call	0x7c	; 0x7c <Reset>
	
	unsigned int control_last = 0b0000; 
	unsigned int control_current = 0b0000;
	
	unsigned int prev_write_address = 0b0000;
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	50 e0       	ldi	r21, 0x00	; 0
	DDRD = 0x00;	// Address D[3:0] | Write Data D[7:4]
	DDRA = 0xFF;	// A[3:0] - Data Read
	
	Reset();
	
	unsigned int control_last = 0b0000; 
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <main+0x1c>
  b2:	c8 01       	movw	r24, r16
  b4:	a7 01       	movw	r20, r14
	unsigned int prev_write_address = 0b0000;
	unsigned int current_write_address = 0b0000;
	
	while (1)
	{
		control_current = 0b1111 & PINB;
  b6:	d6 b3       	in	r29, 0x16	; 22
  b8:	0d 2f       	mov	r16, r29
  ba:	0f 70       	andi	r16, 0x0F	; 15
  bc:	10 e0       	ldi	r17, 0x00	; 0
		current_write_address = PIND;
  be:	c0 b3       	in	r28, 0x10	; 16
  c0:	ec 2e       	mov	r14, r28
  c2:	f1 2c       	mov	r15, r1
		
		if (control_current & RESET) {
  c4:	d3 ff       	sbrs	r29, 3
  c6:	09 c0       	rjmp	.+18     	; 0xda <main+0x40>
			Reset();
  c8:	0e 94 3e 00 	call	0x7c	; 0x7c <Reset>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	87 ea       	ldi	r24, 0xA7	; 167
  ce:	91 e6       	ldi	r25, 0x61	; 97
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x36>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x3c>
  d6:	00 00       	nop
  d8:	1e c0       	rjmp	.+60     	; 0x116 <main+0x7c>
			_delay_ms(100);
			} 
		else if ((control_last ^ control_current) & CLOCK) {		
  da:	9c 01       	movw	r18, r24
  dc:	20 27       	eor	r18, r16
  de:	31 27       	eor	r19, r17
  e0:	22 ff       	sbrs	r18, 2
  e2:	19 c0       	rjmp	.+50     	; 0x116 <main+0x7c>
			if (control_last & CLOCK) {						
  e4:	82 ff       	sbrs	r24, 2
  e6:	11 c0       	rjmp	.+34     	; 0x10a <main+0x70>
				if (control_last & MEM_WRITE) {
  e8:	80 ff       	sbrs	r24, 0
  ea:	0f c0       	rjmp	.+30     	; 0x10a <main+0x70>
					DATA_MEM[prev_write_address & 0b1111] = (prev_write_address >> 4);
  ec:	fa 01       	movw	r30, r20
  ee:	ef 70       	andi	r30, 0x0F	; 15
  f0:	ff 27       	eor	r31, r31
  f2:	52 95       	swap	r21
  f4:	42 95       	swap	r20
  f6:	4f 70       	andi	r20, 0x0F	; 15
  f8:	45 27       	eor	r20, r21
  fa:	5f 70       	andi	r21, 0x0F	; 15
  fc:	45 27       	eor	r20, r21
  fe:	ee 0f       	add	r30, r30
 100:	ff 1f       	adc	r31, r31
 102:	e0 5a       	subi	r30, 0xA0	; 160
 104:	ff 4f       	sbci	r31, 0xFF	; 255
 106:	51 83       	std	Z+1, r21	; 0x01
 108:	40 83       	st	Z, r20
 10a:	87 ea       	ldi	r24, 0xA7	; 167
 10c:	91 e6       	ldi	r25, 0x61	; 97
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <main+0x74>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x7a>
 114:	00 00       	nop
				}
			}
			_delay_ms(100);
		}
		if (control_current & MEM_READ) {
 116:	d1 ff       	sbrs	r29, 1
 118:	cc cf       	rjmp	.-104    	; 0xb2 <main+0x18>
			PORTA = DATA_MEM[current_write_address & 0b1111];
 11a:	cf 70       	andi	r28, 0x0F	; 15
 11c:	ec 2f       	mov	r30, r28
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	ee 0f       	add	r30, r30
 122:	ff 1f       	adc	r31, r31
 124:	e0 5a       	subi	r30, 0xA0	; 160
 126:	ff 4f       	sbci	r31, 0xFF	; 255
 128:	80 81       	ld	r24, Z
 12a:	8b bb       	out	0x1b, r24	; 27
 12c:	c2 cf       	rjmp	.-124    	; 0xb2 <main+0x18>

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
