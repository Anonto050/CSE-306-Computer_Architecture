
ControlUnit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000000c0  00000134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005ba  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000052d  00000000  00000000  0000079a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f3  00000000  00000000  00000cc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000ebc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000324  00000000  00000000  00000ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000005a  00000000  00000000  00001204  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000125e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ec       	ldi	r30, 0xC0	; 192
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
int main(void)
{
	//turn off JTAG to use PORTC
	//One way is to uncheck the JTAG box while writing the fuse bits, the second is to write a 1 to the JTD bit twice consecutively
	
	MCUCSR = (1<<JTD);
  82:	80 e8       	ldi	r24, 0x80	; 128
  84:	84 bf       	out	0x34, r24	; 52
	MCUCSR = (1<<JTD);
  86:	84 bf       	out	0x34, r24	; 52
	
	DDRB = 0xF0; //Opcode
  88:	80 ef       	ldi	r24, 0xF0	; 240
  8a:	87 bb       	out	0x17, r24	; 23
	DDRA = 0xFF;  //All 8 bits
  8c:	8f ef       	ldi	r24, 0xFF	; 255
  8e:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF; //first 4 bits
  90:	84 bb       	out	0x14, r24	; 20
	
	unsigned int instruction = -1;
  92:	2f ef       	ldi	r18, 0xFF	; 255
  94:	3f ef       	ldi	r19, 0xFF	; 255
	
	
    /* Replace with your application code */
    while (1) 
    {
		if((0b1111 & PINB) != instruction){
  96:	86 b3       	in	r24, 0x16	; 22
  98:	8f 70       	andi	r24, 0x0F	; 15
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	28 17       	cp	r18, r24
  9e:	39 07       	cpc	r19, r25
  a0:	d1 f3       	breq	.-12     	; 0x96 <main+0x14>
			instruction = 0b1111 & PINB;
  a2:	26 b3       	in	r18, 0x16	; 22
  a4:	2f 70       	andi	r18, 0x0F	; 15
  a6:	30 e0       	ldi	r19, 0x00	; 0
			control = control_rom[instruction];
  a8:	f9 01       	movw	r30, r18
  aa:	ee 0f       	add	r30, r30
  ac:	ff 1f       	adc	r31, r31
  ae:	e0 5a       	subi	r30, 0xA0	; 160
  b0:	ff 4f       	sbci	r31, 0xFF	; 255
  b2:	90 81       	ld	r25, Z
  b4:	81 81       	ldd	r24, Z+1	; 0x01
			PORTA = control;
  b6:	9b bb       	out	0x1b, r25	; 27
			PORTC = (control>>8);
  b8:	85 bb       	out	0x15, r24	; 21
  ba:	ed cf       	rjmp	.-38     	; 0x96 <main+0x14>

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
